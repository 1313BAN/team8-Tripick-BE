<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.live.domain.recommendation.dao.RecommendationDao">

    <!-- 공통으로 사용될 결과 매핑 정의 -->
    <resultMap id="spotRecommendationResultMap" type="com.ssafy.live.domain.recommendation.dto.SpotRecommendationDTO">
        <id property="no" column="no"/>
        <result property="title" column="title"/>
        <result property="firstImage1" column="first_image1"/>
        <result property="addr" column="addr"/>
        <result property="overview" column="overview"/>
        <result property="latitude" column="latitude"/>
        <result property="longitude" column="longitude"/>
        <result property="avgRating" column="avg_rating"/>
        <result property="contentTypeId" column="content_type_id"/>
        <result property="contentTypeName" column="type_name"/>
        <result property="reviewCount" column="review_count"/>
    </resultMap>
    
    <!-- 성별과 나이에 따른 여행지 추천 -->
    <select id="selectTopSpotsByGenderAndAge" resultMap="spotRecommendationResultMap">
        SELECT 
            s.no, 
            s.title, 
            s.first_image1, 
            s.addr, 
            s.overview, 
            s.latitude, 
            s.longitude, 
            s.content_type_id,
            ct.type_name,
            AVG(r.rating) as avg_rating,
            COUNT(r.review_id) as review_count
        FROM 
            spots s
        JOIN 
            reviews r ON s.no = r.no
        JOIN 
            users u ON r.user_id = u.id
        JOIN
            content_type ct ON s.content_type_id = ct.type_id
        WHERE 
            u.gender = #{gender}
            AND u.age BETWEEN #{minAge} AND #{maxAge}
        GROUP BY 
            s.no, s.title, s.first_image1, s.addr, s.overview, s.latitude, s.longitude, s.content_type_id, ct.type_name
        HAVING 
            COUNT(r.review_id) > 0
        ORDER BY 
            avg_rating DESC, review_count DESC
        LIMIT 10
    </select>
    
    <!-- 여행 동기에 따른 추천 -->
    <select id="selectTopSpotsByMotive" resultMap="spotRecommendationResultMap">
        SELECT 
            s.no, 
            s.title, 
            s.first_image1, 
            s.addr, 
            s.overview, 
            s.latitude, 
            s.longitude, 
            s.content_type_id,
            ct.type_name,
            AVG(r.rating) as avg_rating,
            COUNT(r.review_id) as review_count
        FROM 
            spots s
        JOIN 
            reviews r ON s.no = r.no
        JOIN 
            users u ON r.user_id = u.id
        JOIN 
            user_tralve_motive utm ON u.id = utm.user_id
        JOIN
            content_type ct ON s.content_type_id = ct.type_id
        WHERE 
            utm.motive_code = #{motiveCode}
        GROUP BY 
            s.no, s.title, s.first_image1, s.addr, s.overview, s.latitude, s.longitude, s.content_type_id, ct.type_name
        HAVING 
            COUNT(r.review_id) > 0
        ORDER BY 
            avg_rating DESC, review_count DESC
        LIMIT 10
    </select>
    
    <!-- 특정 연도에 가장 인기 있었던 여행지 -->
    <select id="selectPopularSpotsByYear" resultMap="spotRecommendationResultMap">
        SELECT 
            s.no, 
            s.title, 
            s.first_image1, 
            s.addr, 
            s.overview, 
            s.latitude, 
            s.longitude, 
            s.content_type_id,
            ct.type_name,
            AVG(r.rating) as avg_rating,
            COUNT(r.review_id) as review_count
        FROM 
            spots s
        JOIN 
            reviews r ON s.no = r.no
        JOIN
            content_type ct ON s.content_type_id = ct.type_id
        WHERE 
            YEAR(r.created_at) = #{year}
        GROUP BY 
            s.no, s.title, s.first_image1, s.addr, s.overview, s.latitude, s.longitude, s.content_type_id, ct.type_name
        HAVING 
            COUNT(r.review_id) > 0
        ORDER BY 
            avg_rating DESC, review_count DESC
        LIMIT 10
    </select>
    
    <!-- 복합 조건 기반 추천 -->
    <select id="selectSpotsByMultipleCriteria" parameterType="com.ssafy.live.domain.recommendation.dto.RecommendationRequestDTO" resultMap="spotRecommendationResultMap">
        SELECT 
            s.no, 
            s.title, 
            s.first_image1, 
            s.addr, 
            s.overview, 
            s.latitude, 
            s.longitude, 
            s.content_type_id,
            ct.type_name,
            AVG(r.rating) as avg_rating,
            COUNT(r.review_id) as review_count
        FROM 
            spots s
        JOIN 
            reviews r ON s.no = r.no
        JOIN
            content_type ct ON s.content_type_id = ct.type_id
        <if test="criteria.gender != null or criteria.minAge != null or criteria.motiveCode != null">
            JOIN 
                users u ON r.user_id = u.id
            <if test="criteria.motiveCode != null">
                JOIN 
                    user_tralve_motive utm ON u.id = utm.user_id
            </if>
        </if>
        <where>
            <if test="criteria.gender != null">
                AND u.gender = #{criteria.gender}
            </if>
            <if test="criteria.minAge != null and criteria.maxAge != null">
                AND u.age BETWEEN #{criteria.minAge} AND #{criteria.maxAge}
            </if>
            <if test="criteria.motiveCode != null">
                AND utm.motive_code = #{criteria.motiveCode}
            </if>
            <if test="criteria.contentTypeId != null">
                AND s.content_type_id = #{criteria.contentTypeId}
            </if>
            <if test="criteria.areaCode != null">
                AND s.area_code = #{criteria.areaCode}
                <if test="criteria.siGunGuCode != null">
                    AND s.si_gun_gu_code = #{criteria.siGunGuCode}
                </if>
            </if>
        </where>
        GROUP BY 
            s.no, s.title, s.first_image1, s.addr, s.overview, s.latitude, s.longitude, s.content_type_id, ct.type_name
        HAVING 
            COUNT(r.review_id) > 2
        ORDER BY 
            avg_rating DESC, review_count DESC
        LIMIT #{criteria.limit}
    </select>
    
    <!-- 특정 지역 기반 추천 -->
    <select id="selectTopSpotsByArea" resultMap="spotRecommendationResultMap">
        SELECT 
            s.no, 
            s.title, 
            s.first_image1, 
            s.addr, 
            s.overview, 
            s.latitude, 
            s.longitude, 
            s.content_type_id,
            ct.type_name,
            AVG(r.rating) as avg_rating,
            COUNT(r.review_id) as review_count
        FROM 
            spots s
        LEFT JOIN 
            reviews r ON s.no = r.no
        JOIN
            content_type ct ON s.content_type_id = ct.type_id
        WHERE 
            s.area_code = #{areaCode}
            <if test="siGunGuCode != null">
                AND s.si_gun_gu_code = #{siGunGuCode}
            </if>
        GROUP BY 
            s.no, s.title, s.first_image1, s.addr, s.overview, s.latitude, s.longitude, s.content_type_id, ct.type_name
        ORDER BY 
            avg_rating DESC, review_count DESC
        LIMIT 10
    </select>
    
    <!-- 컨텐츠 타입별 추천 -->
    <select id="selectTopSpotsByContentType" resultMap="spotRecommendationResultMap">
        SELECT 
            s.no, 
            s.title, 
            s.first_image1, 
            s.addr, 
            s.overview, 
            s.latitude, 
            s.longitude, 
            s.content_type_id,
            ct.type_name,
            AVG(r.rating) as avg_rating,
            COUNT(r.review_id) as review_count
        FROM 
            spots s
        LEFT JOIN 
            reviews r ON s.no = r.no
        JOIN
            content_type ct ON s.content_type_id = ct.type_id
        WHERE 
            s.content_type_id = #{contentTypeId}
        GROUP BY 
            s.no, s.title, s.first_image1, s.addr, s.overview, s.latitude, s.longitude, s.content_type_id, ct.type_name
        ORDER BY 
            avg_rating DESC, review_count DESC
        LIMIT 10
    </select>
    
        <!-- 사용자의 여행 동기 목록 조회 -->
    <select id="selectUserMotives" resultType="int">
        SELECT motive_code
        FROM user_tralve_motive
        WHERE user_id = #{userId}
    </select>

    <!-- 여행 동기 이름 조회 -->
    <select id="selectMotiveName" resultType="string">
        SELECT motive_name
        FROM motive
        WHERE motive_code = #{motiveCode}
    </select>

    <!-- 시도 이름 조회 -->
    <select id="selectSidoName" resultType="string">
        SELECT sido_name
        FROM sidos
        WHERE sido_code = #{sidoCode}
    </select>
    
    
</mapper>